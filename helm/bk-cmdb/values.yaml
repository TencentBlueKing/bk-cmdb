expose:
  # Set the way how to expose the service. Set the type as "ingress",
  # "clusterIP", "nodePort" or "loadBalancer" and fill the information
  # in the corresponding section
  type: ingress
  tls:
    # Enable the tls or not. Note: if the type is "ingress" and the tls
    # is disabled, the port must be included in the command when pull/push
    # images. Refer to https://github.com/Tencent/bk-cmdb/issues/
    # for the detail.
    enabled: false
    # Fill the name of secret if you want to use your own TLS certificate
    # and private key. The secret must contain keys named tls.crt and
    # tls.key that contain the certificate and private key to use for TLS
    # The certificate and private key will be generated automatically if
    # it is not set
    secretName: ""
    # By default, the Notary service will use the same cert and key as
    # described above. Fill the name of secret if you want to use a
    # separated one. Only needed when the type is "ingress".
    notarySecretName: ""
    # The commmon name used to generate the certificate, it's necessary
    # when the type isn't "ingress" and "secretName" is null
    commonName: ""
  ingress:
    hosts:
      core: bk-cmdb.blueking.domain
      notary: notary.cmdb.domain
    annotations:
      ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
  clusterIP:
    # The name of ClusterIP service
    name: cmdb
    ports:
      # The service port cmdb listens on when serving with HTTP
      httpPort: 80
      # The service port cmdb listens on when serving with HTTPS
      httpsPort: 443
      # The service port Notary listens on. Only needed when notary.enabled
      # is set to true
      notaryPort: 4443
  nodePort:
    # The name of NodePort service
    name: cmdb
    ports:
      http:
        # The service port cmdb listens on when serving with HTTP
        port: 80
        # The node port cmdb listens on when serving with HTTP
        nodePort: 30002
      https:
        # The service port cmdb listens on when serving with HTTPS
        port: 443
        # The node port cmdb listens on when serving with HTTPS
        nodePort: 30003
      # Only needed when notary.enabled is set to true
      notary:
        # The service port Notary listens on
        port: 4443
        # The node port Notary listens on
        nodePort: 30004
  loadBalancer:
    # The name of LoadBalancer service
    name: cmdb
    ports:
      # The service port cmdb listens on when serving with HTTP
      httpPort: 80
      # The service port cmdb listens on when serving with HTTPS
      httpsPort: 443
      # The service port Notary listens on. Only needed when notary.enabled 
      # is set to true
      notaryPort: 4443

# The external URL for cmdb core service. It is used to
# 1) populate the docker/helm commands showed on portal
# 2) populate the token service URL returned to docker/notary client
#
# Format: protocol://domain[:port]. Usually:
# 1) if "expose.type" is "ingress", the "domain" should be
# the value of "expose.ingress.hosts.core"
# 2) if "expose.type" is "clusterIP", the "domain" should be
# the value of "expose.clusterIP.name"
# 3) if "expose.type" is "nodePort", the "domain" should be
# the IP address of k8s node
#
# If cmdb is deployed behind the proxy, set it as the URL of proxy
externalURL: https://bk-cmdb.blueking.domain

# The persistence is enabled by default and a default StorageClass
# is needed in the k8s cluster to provision volumes dynamicly.
# Specify another StorageClass in the "storageClass" or set "existingClaim"
# if you have already existing persistent volumes to use
#
# For storing images and charts, you can also use "azure", "gcs", "s3",
# "swift" or "oss". Set it in the "imageChartStorage" section
persistence:
  enabled: false
  # Setting it to "keep" to avoid removing PVCs during a helm delete
  # operation. Leaving it empty will delete PVCs after the chart deleted
  resourcePolicy: "keep"
  persistentVolumeClaim:
    registry:
      # Use the existing PVC which must be created manually before bound,
      # and specify the "subPath" if the PVC is shared with other components
      existingClaim: ""
      # Specify the "storageClass" used to provision the volume. Or the default
      # StorageClass will be used(the default).
      # Set it to "-" to disable dynamic provisioning
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 5Gi
    # If external Redis is used, the following settings for Redis will
    # be ignored
    redis:
      existingClaim: ""
      storageClass: ""
      subPath: ""
      accessMode: ReadWriteOnce
      size: 1Gi
  # Define which storage backend is used for registry and chartmuseum to store
  # images and charts. Refer to
  # https://github.com/docker/distribution/blob/master/docs/configuration.md#storage
  # for the detail.

imagePullPolicy: IfNotPresent

logLevel: debug

adminserver:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    config: /etc/configures/migrate.conf
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
  volumeMounts:
  volumes:
cmdb:
  auth:
    enable: false
webserver:
  # dnsPolicy: ClusterFirstWithHostNet
  # hostNetwork: true
  dnsPolicy: ClusterFirst
  hostNetwork: false
  ingress:
    enabled: true
    hosts:
      - cmdb.bk.com
    annotations:
      kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    tls:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  service:
    type: "NodePort"
    ports:
      - protocol: TCP
        port: 80
        targetPort: 80
        nodePort: 32033
    externalPort: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
apiserver:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
hostserver:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
tmserver:
  enabled: false
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
synchronizeserver:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
procserver:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
coreservice:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
operationserver:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
eventserver:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
datacollection:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
taskserver:
  enabled: true
  image:
    repository: cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
tmserver:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
toposerver:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
taskserver:
  enabled: true
  image:
    repository: bk-cmdb
    tag: v3.6.3
  replicas: 1
  port: 80
  command:
    logDir: ./logs
    logLevel: 3
    logtostderr: false
    enableAuth: false
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Additional deployment annotations
  podAnnotations: {}
zookeeper:
  ## As weighted quorums are not supported, it is imperative that an odd number of replicas
  ## be chosen. Moreover, the number of replicas should be either 1, 3, 5, or 7.
  ##
  ## ref: https://github.com/kubernetes/contrib/tree/master/statefulsets/zookeeper#stateful-set
  replicaCount: 1  # Desired quantity of ZooKeeper pods. This should always be (1,3,5, or 7)

  podDisruptionBudget:
    maxUnavailable: 1  # Limits how many Zokeeper pods may be unavailable due to voluntary disruptions.

  terminationGracePeriodSeconds: 1800  # Duration in seconds a Zokeeper pod needs to terminate gracefully.

  ## OnDelete requires you to manually delete each pod when making updates.
  ## This approach is at the moment safer than RollingUpdate because replication
  ## may be incomplete when replication source pod is killed.
  ##
  ## ref: http://blog.kubernetes.io/2017/09/kubernetes-statefulsets-daemonsets.html
  updateStrategy:
    type: OnDelete  # Pods will only be created when you manually delete old pods.

  ## refs:
  ## - https://github.com/kubernetes/contrib/tree/master/statefulsets/zookeeper
  ## - https://github.com/kubernetes/contrib/blob/master/statefulsets/zookeeper/Makefile#L1
  image:
    repository: gcr.io/google_samples/k8szk  # Container image repository for zookeeper container.
    tag: v3  # Container image tag for zookeeper container.
    pullPolicy: IfNotPresent  # Image pull criteria for zookeeper container.

  service:
    type: ClusterIP  # Exposes zookeeper on a cluster-internal IP.
    annotations: {}  # Arbitrary non-identifying metadata for zookeeper service.
      ## AWS example for use with LoadBalancer service type.
      # external-dns.alpha.kubernetes.io/hostname: zookeeper.cluster.local
      # service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
      # service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    ports:
      client:
        port: 2181  # Service port number for client port.
        targetPort: client  # Service target port for client port.
        protocol: TCP  # Service port protocol for client port.

  ## Headless service.
  ##
  headless:
    annotations: {}

  ports:
    client:
      containerPort: 2181  # Port number for zookeeper container client port.
      protocol: TCP  # Protocol for zookeeper container client port.
    election:
      containerPort: 3888  # Port number for zookeeper container election port.
      protocol: TCP  # Protocol for zookeeper container election port.
    server:
      containerPort: 2888  # Port number for zookeeper container server port.
      protocol: TCP  # Protocol for zookeeper container server port.
  persistence:
    enabled: false
mongodb:
  busyboxImage:
    image: busybox
    tag: latest
    imagePullPolicy: IfNotPresent
  image:
    registry: docker.io
    repository: bitnami/mongodb
    tag: 4.0.6
    pullPolicy: IfNotPresent
  usePassword: true
  mongodbUsername: cc
  mongodbPassword: cc
  mongodbDatabase: cmdb
redis:
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 4.0.12
    pullPolicy: IfNotPresent
  cluster:
    enabled: true
    slaveCount: 1

  networkPolicy:
    enabled: false

  serviceAccount:
    create: true
    name:

  ## Use password authentication
  usePassword: true
  password: cmdb
  persistence: {}
  master:
    ## Redis port
    port: 6379
    command:
    - "/run.sh"
    extraFlags: []
    ## Redis Master additional pod labels and annotations
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    podLabels: {}
    podAnnotations: {}

    livenessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5

    affinity: {}
    service:
      ##  Redis Master Service type
      type: ClusterIP
      port: 6379
      annotations: {}
      loadBalancerIP:

    ## Redis Master Pod Security Context
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001

    persistence:
      enabled: false
      path: /data
      subPath: ""
      accessModes:
      - ReadWriteOnce
      size: 8Gi

    statefulset:
      updateStrategy: RollingUpdate
ApiVersion:
  Deployment: "apps/v1"
migrate:
  image:
    repository: bk-cmdb
    tag: v3.6.3
  enabled: true
  bootstrapShellCommand: "/data/cmdb/cmdb_adminserver/init_db.sh"
