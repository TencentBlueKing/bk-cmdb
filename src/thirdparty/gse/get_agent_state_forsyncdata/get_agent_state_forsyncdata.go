/*
 * Tencent is pleased to support the open source community by making 蓝鲸 available.
 * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package get_agent_state_forsyncdata

import (
	"bytes"
	"context"
	"fmt"
	"reflect"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - GseCompositeID
//  - IP
type CacheIPInfo struct {
	GseCompositeID string `thrift:"gse_composite_id,1" db:"gse_composite_id" json:"gse_composite_id"`
	IP             string `thrift:"ip,2" db:"ip" json:"ip"`
}

func NewCacheIPInfo() *CacheIPInfo {
	return &CacheIPInfo{}
}

func (p *CacheIPInfo) GetGseCompositeID() string {
	return p.GseCompositeID
}

func (p *CacheIPInfo) GetIP() string {
	return p.IP
}
func (p *CacheIPInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CacheIPInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GseCompositeID = v
	}
	return nil
}

func (p *CacheIPInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *CacheIPInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cache_ip_info"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CacheIPInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gse_composite_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gse_composite_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.GseCompositeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.gse_composite_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gse_composite_id: ", p), err)
	}
	return err
}

func (p *CacheIPInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *CacheIPInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CacheIPInfo(%+v)", *p)
}

// Attributes:
//  - Hosts
type AgentStatusRequest struct {
	Hosts []*CacheIPInfo `thrift:"hosts,1" db:"hosts" json:"hosts"`
}

func NewAgentStatusRequest() *AgentStatusRequest {
	return &AgentStatusRequest{}
}

func (p *AgentStatusRequest) GetHosts() []*CacheIPInfo {
	return p.Hosts
}
func (p *AgentStatusRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AgentStatusRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*CacheIPInfo, 0, size)
	p.Hosts = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &CacheIPInfo{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Hosts = append(p.Hosts, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AgentStatusRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("agent_status_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AgentStatusRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hosts: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Hosts {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hosts: ", p), err)
	}
	return err
}

func (p *AgentStatusRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentStatusRequest(%+v)", *p)
}

// Attributes:
//  - Result_
//  - BkErrorCode
//  - BkErrorMsg
type AgentStatusResponse struct {
	Result_     map[string]string `thrift:"result,1" db:"result" json:"result"`
	BkErrorCode int32             `thrift:"bk_error_code,2" db:"bk_error_code" json:"bk_error_code"`
	BkErrorMsg  string            `thrift:"bk_error_msg,3" db:"bk_error_msg" json:"bk_error_msg"`
}

func NewAgentStatusResponse() *AgentStatusResponse {
	return &AgentStatusResponse{}
}

func (p *AgentStatusResponse) GetResult_() map[string]string {
	return p.Result_
}

func (p *AgentStatusResponse) GetBkErrorCode() int32 {
	return p.BkErrorCode
}

func (p *AgentStatusResponse) GetBkErrorMsg() string {
	return p.BkErrorMsg
}
func (p *AgentStatusResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AgentStatusResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Result_ = tMap
	for i := 0; i < size; i++ {
		var _key1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key1 = v
		}
		var _val2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val2 = v
		}
		p.Result_[_key1] = _val2
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AgentStatusResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BkErrorCode = v
	}
	return nil
}

func (p *AgentStatusResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BkErrorMsg = v
	}
	return nil
}

func (p *AgentStatusResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("agent_status_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AgentStatusResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Result_)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Result_ {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *AgentStatusResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bk_error_code", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bk_error_code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BkErrorCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bk_error_code (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bk_error_code: ", p), err)
	}
	return err
}

func (p *AgentStatusResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bk_error_msg", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bk_error_msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.BkErrorMsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bk_error_msg (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bk_error_msg: ", p), err)
	}
	return err
}

func (p *AgentStatusResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgentStatusResponse(%+v)", *p)
}

type CacheAPI interface {
	// Parameters:
	//  - RequestInfo
	GetAgentStatus(ctx context.Context, request_info *AgentStatusRequest) (r *AgentStatusResponse, err error)
}

type CacheAPIClient struct {
	c thrift.TClient
}

func NewCacheAPIClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CacheAPIClient {
	return &CacheAPIClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCacheAPIClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CacheAPIClient {
	return &CacheAPIClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCacheAPIClient(c thrift.TClient) *CacheAPIClient {
	return &CacheAPIClient{
		c: c,
	}
}

func (p *CacheAPIClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - RequestInfo
func (p *CacheAPIClient) GetAgentStatus(ctx context.Context, request_info *AgentStatusRequest) (r *AgentStatusResponse,
	err error) {
	var _args3 CacheAPIGetAgentStatusArgs
	_args3.RequestInfo = request_info
	var _result4 CacheAPIGetAgentStatusResult
	if err = p.Client_().Call(ctx, "get_agent_status", &_args3, &_result4); err != nil {
		return
	}
	return _result4.GetSuccess(), nil
}

type CacheAPIProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CacheAPI
}

func (p *CacheAPIProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CacheAPIProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CacheAPIProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCacheAPIProcessor(handler CacheAPI) *CacheAPIProcessor {

	self5 := &CacheAPIProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self5.processorMap["get_agent_status"] = &cacheAPIProcessorGetAgentStatus{handler: handler}
	return self5
}

func (p *CacheAPIProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool,
	err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x6 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x6.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x6

}

type cacheAPIProcessorGetAgentStatus struct {
	handler CacheAPI
}

func (p *cacheAPIProcessorGetAgentStatus) Process(ctx context.Context, seqId int32,
	iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CacheAPIGetAgentStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_agent_status", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CacheAPIGetAgentStatusResult{}
	var retval *AgentStatusResponse
	var err2 error
	if retval, err2 = p.handler.GetAgentStatus(ctx, args.RequestInfo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR,
			"Internal error processing get_agent_status: "+err2.Error())
		oprot.WriteMessageBegin("get_agent_status", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_agent_status", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestInfo
type CacheAPIGetAgentStatusArgs struct {
	RequestInfo *AgentStatusRequest `thrift:"request_info,1" db:"request_info" json:"request_info"`
}

func NewCacheAPIGetAgentStatusArgs() *CacheAPIGetAgentStatusArgs {
	return &CacheAPIGetAgentStatusArgs{}
}

var CacheAPIGetAgentStatusArgs_RequestInfo_DEFAULT *AgentStatusRequest

func (p *CacheAPIGetAgentStatusArgs) GetRequestInfo() *AgentStatusRequest {
	if !p.IsSetRequestInfo() {
		return CacheAPIGetAgentStatusArgs_RequestInfo_DEFAULT
	}
	return p.RequestInfo
}
func (p *CacheAPIGetAgentStatusArgs) IsSetRequestInfo() bool {
	return p.RequestInfo != nil
}

func (p *CacheAPIGetAgentStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CacheAPIGetAgentStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestInfo = &AgentStatusRequest{}
	if err := p.RequestInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestInfo), err)
	}
	return nil
}

func (p *CacheAPIGetAgentStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_agent_status_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CacheAPIGetAgentStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request_info", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_info: ", p), err)
	}
	if err := p.RequestInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_info: ", p), err)
	}
	return err
}

func (p *CacheAPIGetAgentStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CacheAPIGetAgentStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CacheAPIGetAgentStatusResult struct {
	Success *AgentStatusResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCacheAPIGetAgentStatusResult() *CacheAPIGetAgentStatusResult {
	return &CacheAPIGetAgentStatusResult{}
}

var CacheAPIGetAgentStatusResult_Success_DEFAULT *AgentStatusResponse

func (p *CacheAPIGetAgentStatusResult) GetSuccess() *AgentStatusResponse {
	if !p.IsSetSuccess() {
		return CacheAPIGetAgentStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CacheAPIGetAgentStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CacheAPIGetAgentStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CacheAPIGetAgentStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AgentStatusResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *CacheAPIGetAgentStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_agent_status_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CacheAPIGetAgentStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CacheAPIGetAgentStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CacheAPIGetAgentStatusResult(%+v)", *p)
}
