/*
 * Tencent is pleased to support the open source community by making
 * 蓝鲸智云 - 配置平台 (BlueKing - Configuration System) available.
 * Copyright (C) 2017 THL A29 Limited,
 * a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 * We undertake not to change the open source license (MIT license) applicable
 * to the current version of the project delivered to anyone in the future.
 */

// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package push_file_forsyncdata

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"regexp"
	"strings"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//   - MIP
//   - MBusinessid
type API_Host struct {
	MIP         string `thrift:"m_ip,1,required" db:"m_ip" json:"m_ip"`
	MBusinessid int32  `thrift:"m_businessid,2" db:"m_businessid" json:"m_businessid"`
}

func NewAPI_Host() *API_Host {
	return &API_Host{}
}

func (p *API_Host) GetMIP() string {
	return p.MIP
}

var API_Host_MBusinessid_DEFAULT int32 = 0

func (p *API_Host) GetMBusinessid() int32 {
	return p.MBusinessid
}
func (p *API_Host) IsSetMBusinessid() bool {
	return p.MBusinessid != API_Host_MBusinessid_DEFAULT
}

func (p *API_Host) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMIP bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMIP = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MIP is not set"))
	}
	return nil
}

func (p *API_Host) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MIP = v
	}
	return nil
}

func (p *API_Host) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MBusinessid = v
	}
	return nil
}

func (p *API_Host) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "API_Host"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *API_Host) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_ip", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:m_ip: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MIP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_ip (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:m_ip: ", p), err)
	}
	return err
}

func (p *API_Host) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMBusinessid() {
		if err := oprot.WriteFieldBegin(ctx, "m_businessid", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:m_businessid: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(p.MBusinessid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.m_businessid (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:m_businessid: ", p), err)
		}
	}
	return err
}

func (p *API_Host) Equals(other *API_Host) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MIP != other.MIP {
		return false
	}
	if p.MBusinessid != other.MBusinessid {
		return false
	}
	return true
}

func (p *API_Host) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("API_Host(%+v)", *p)
}

func (p *API_Host) Validate() error {
	return nil
}

// Attributes:
//   - MErrcode
//   - MErrmsg
//   - MContent
type API_CommRsp struct {
	MErrcode int32  `thrift:"m_errcode,1,required" db:"m_errcode" json:"m_errcode"`
	MErrmsg  string `thrift:"m_errmsg,2,required" db:"m_errmsg" json:"m_errmsg"`
	MContent string `thrift:"m_content,3,required" db:"m_content" json:"m_content"`
}

func NewAPI_CommRsp() *API_CommRsp {
	return &API_CommRsp{}
}

func (p *API_CommRsp) GetMErrcode() int32 {
	return p.MErrcode
}

func (p *API_CommRsp) GetMErrmsg() string {
	return p.MErrmsg
}

func (p *API_CommRsp) GetMContent() string {
	return p.MContent
}
func (p *API_CommRsp) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMErrcode bool = false
	var issetMErrmsg bool = false
	var issetMContent bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMErrcode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetMErrmsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetMContent = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMErrcode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MErrcode is not set"))
	}
	if !issetMErrmsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MErrmsg is not set"))
	}
	if !issetMContent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MContent is not set"))
	}
	return nil
}

func (p *API_CommRsp) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MErrcode = v
	}
	return nil
}

func (p *API_CommRsp) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MErrmsg = v
	}
	return nil
}

func (p *API_CommRsp) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MContent = v
	}
	return nil
}

func (p *API_CommRsp) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "API_CommRsp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *API_CommRsp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_errcode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:m_errcode: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.MErrcode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_errcode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:m_errcode: ", p), err)
	}
	return err
}

func (p *API_CommRsp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_errmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:m_errmsg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MErrmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_errmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:m_errmsg: ", p), err)
	}
	return err
}

func (p *API_CommRsp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_content", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:m_content: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MContent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_content (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:m_content: ", p), err)
	}
	return err
}

func (p *API_CommRsp) Equals(other *API_CommRsp) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MErrcode != other.MErrcode {
		return false
	}
	if p.MErrmsg != other.MErrmsg {
		return false
	}
	if p.MContent != other.MContent {
		return false
	}
	return true
}

func (p *API_CommRsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("API_CommRsp(%+v)", *p)
}

func (p *API_CommRsp) Validate() error {
	return nil
}

// Attributes:
//   - MErrcode
//   - MErrmsg
//   - MRsp
type API_MapRsp struct {
	MErrcode int32             `thrift:"m_errcode,1,required" db:"m_errcode" json:"m_errcode"`
	MErrmsg  string            `thrift:"m_errmsg,2,required" db:"m_errmsg" json:"m_errmsg"`
	MRsp     map[string]string `thrift:"m_rsp,3,required" db:"m_rsp" json:"m_rsp"`
}

func NewAPI_MapRsp() *API_MapRsp {
	return &API_MapRsp{}
}

func (p *API_MapRsp) GetMErrcode() int32 {
	return p.MErrcode
}

func (p *API_MapRsp) GetMErrmsg() string {
	return p.MErrmsg
}

func (p *API_MapRsp) GetMRsp() map[string]string {
	return p.MRsp
}
func (p *API_MapRsp) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMErrcode bool = false
	var issetMErrmsg bool = false
	var issetMRsp bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMErrcode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetMErrmsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetMRsp = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMErrcode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MErrcode is not set"))
	}
	if !issetMErrmsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MErrmsg is not set"))
	}
	if !issetMRsp {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MRsp is not set"))
	}
	return nil
}

func (p *API_MapRsp) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MErrcode = v
	}
	return nil
}

func (p *API_MapRsp) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MErrmsg = v
	}
	return nil
}

func (p *API_MapRsp) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.MRsp = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.MRsp[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *API_MapRsp) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "API_MapRsp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *API_MapRsp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_errcode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:m_errcode: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.MErrcode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_errcode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:m_errcode: ", p), err)
	}
	return err
}

func (p *API_MapRsp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_errmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:m_errmsg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MErrmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_errmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:m_errmsg: ", p), err)
	}
	return err
}

func (p *API_MapRsp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_rsp", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:m_rsp: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MRsp)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MRsp {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:m_rsp: ", p), err)
	}
	return err
}

func (p *API_MapRsp) Equals(other *API_MapRsp) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MErrcode != other.MErrcode {
		return false
	}
	if p.MErrmsg != other.MErrmsg {
		return false
	}
	if len(p.MRsp) != len(other.MRsp) {
		return false
	}
	for k, _tgt := range p.MRsp {
		_src2 := other.MRsp[k]
		if _tgt != _src2 {
			return false
		}
	}
	return true
}

func (p *API_MapRsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("API_MapRsp(%+v)", *p)
}

func (p *API_MapRsp) Validate() error {
	return nil
}

// Attributes:
//   - MName
//   - MPath
//   - MDestName
//   - MDestPath
//   - MBackupName
//   - MBackupPath
//   - MOwner
//   - MRight
//   - MMd5
type API_BaseFileInfo struct {
	MName       string `thrift:"m_name,1,required" db:"m_name" json:"m_name"`
	MPath       string `thrift:"m_path,2,required" db:"m_path" json:"m_path"`
	MDestName   string `thrift:"m_destName,3,required" db:"m_destName" json:"m_destName"`
	MDestPath   string `thrift:"m_destPath,4,required" db:"m_destPath" json:"m_destPath"`
	MBackupName string `thrift:"m_backupName,5" db:"m_backupName" json:"m_backupName"`
	MBackupPath string `thrift:"m_backupPath,6" db:"m_backupPath" json:"m_backupPath"`
	MOwner      string `thrift:"m_owner,7" db:"m_owner" json:"m_owner"`
	MRight      int32  `thrift:"m_right,8" db:"m_right" json:"m_right"`
	MMd5        string `thrift:"m_md5,9" db:"m_md5" json:"m_md5"`
}

func NewAPI_BaseFileInfo() *API_BaseFileInfo {
	return &API_BaseFileInfo{}
}

func (p *API_BaseFileInfo) GetMName() string {
	return p.MName
}

func (p *API_BaseFileInfo) GetMPath() string {
	return p.MPath
}

func (p *API_BaseFileInfo) GetMDestName() string {
	return p.MDestName
}

func (p *API_BaseFileInfo) GetMDestPath() string {
	return p.MDestPath
}

func (p *API_BaseFileInfo) GetMBackupName() string {
	return p.MBackupName
}

func (p *API_BaseFileInfo) GetMBackupPath() string {
	return p.MBackupPath
}

func (p *API_BaseFileInfo) GetMOwner() string {
	return p.MOwner
}

func (p *API_BaseFileInfo) GetMRight() int32 {
	return p.MRight
}

func (p *API_BaseFileInfo) GetMMd5() string {
	return p.MMd5
}
func (p *API_BaseFileInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMName bool = false
	var issetMPath bool = false
	var issetMDestName bool = false
	var issetMDestPath bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetMPath = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetMDestName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetMDestPath = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MName is not set"))
	}
	if !issetMPath {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MPath is not set"))
	}
	if !issetMDestName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MDestName is not set"))
	}
	if !issetMDestPath {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MDestPath is not set"))
	}
	return nil
}

func (p *API_BaseFileInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MName = v
	}
	return nil
}

func (p *API_BaseFileInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MPath = v
	}
	return nil
}

func (p *API_BaseFileInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MDestName = v
	}
	return nil
}

func (p *API_BaseFileInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MDestPath = v
	}
	return nil
}

func (p *API_BaseFileInfo) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MBackupName = v
	}
	return nil
}

func (p *API_BaseFileInfo) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MBackupPath = v
	}
	return nil
}

func (p *API_BaseFileInfo) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.MOwner = v
	}
	return nil
}

func (p *API_BaseFileInfo) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MRight = v
	}
	return nil
}

func (p *API_BaseFileInfo) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.MMd5 = v
	}
	return nil
}

func (p *API_BaseFileInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "API_BaseFileInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *API_BaseFileInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:m_name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:m_name: ", p), err)
	}
	return err
}

func (p *API_BaseFileInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_path", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:m_path: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_path (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:m_path: ", p), err)
	}
	return err
}

func (p *API_BaseFileInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_destName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:m_destName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MDestName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_destName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:m_destName: ", p), err)
	}
	return err
}

func (p *API_BaseFileInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_destPath", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:m_destPath: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MDestPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_destPath (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:m_destPath: ", p), err)
	}
	return err
}

func (p *API_BaseFileInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_backupName", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:m_backupName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MBackupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_backupName (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:m_backupName: ", p), err)
	}
	return err
}

func (p *API_BaseFileInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_backupPath", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:m_backupPath: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MBackupPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_backupPath (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:m_backupPath: ", p), err)
	}
	return err
}

func (p *API_BaseFileInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_owner", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:m_owner: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MOwner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_owner (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:m_owner: ", p), err)
	}
	return err
}

func (p *API_BaseFileInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_right", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:m_right: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.MRight)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_right (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:m_right: ", p), err)
	}
	return err
}

func (p *API_BaseFileInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_md5", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:m_md5: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MMd5)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_md5 (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:m_md5: ", p), err)
	}
	return err
}

func (p *API_BaseFileInfo) Equals(other *API_BaseFileInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MName != other.MName {
		return false
	}
	if p.MPath != other.MPath {
		return false
	}
	if p.MDestName != other.MDestName {
		return false
	}
	if p.MDestPath != other.MDestPath {
		return false
	}
	if p.MBackupName != other.MBackupName {
		return false
	}
	if p.MBackupPath != other.MBackupPath {
		return false
	}
	if p.MOwner != other.MOwner {
		return false
	}
	if p.MRight != other.MRight {
		return false
	}
	if p.MMd5 != other.MMd5 {
		return false
	}
	return true
}

func (p *API_BaseFileInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("API_BaseFileInfo(%+v)", *p)
}

func (p *API_BaseFileInfo) Validate() error {
	return nil
}

// Attributes:
//   - MFile
//   - MHostlist
//   - MContent
//   - MSeqid
//   - MFlags
//   - MCaller
type API_FileInfoV2 struct {
	MFile     *API_BaseFileInfo `thrift:"m_file,1,required" db:"m_file" json:"m_file"`
	MHostlist []*API_Host       `thrift:"m_hostlist,2,required" db:"m_hostlist" json:"m_hostlist"`
	MContent  string            `thrift:"m_content,3" db:"m_content" json:"m_content"`
	MSeqid    string            `thrift:"m_seqid,4" db:"m_seqid" json:"m_seqid"`
	MFlags    int32             `thrift:"m_flags,5" db:"m_flags" json:"m_flags"`
	MCaller   map[string]string `thrift:"m_caller,6" db:"m_caller" json:"m_caller,omitempty"`
}

func NewAPI_FileInfoV2() *API_FileInfoV2 {
	return &API_FileInfoV2{}
}

var API_FileInfoV2_MFile_DEFAULT *API_BaseFileInfo

func (p *API_FileInfoV2) GetMFile() *API_BaseFileInfo {
	if !p.IsSetMFile() {
		return API_FileInfoV2_MFile_DEFAULT
	}
	return p.MFile
}

func (p *API_FileInfoV2) GetMHostlist() []*API_Host {
	return p.MHostlist
}

func (p *API_FileInfoV2) GetMContent() string {
	return p.MContent
}

func (p *API_FileInfoV2) GetMSeqid() string {
	return p.MSeqid
}

func (p *API_FileInfoV2) GetMFlags() int32 {
	return p.MFlags
}

var API_FileInfoV2_MCaller_DEFAULT map[string]string

func (p *API_FileInfoV2) GetMCaller() map[string]string {
	return p.MCaller
}
func (p *API_FileInfoV2) IsSetMFile() bool {
	return p.MFile != nil
}

func (p *API_FileInfoV2) IsSetMCaller() bool {
	return p.MCaller != nil
}

func (p *API_FileInfoV2) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMFile bool = false
	var issetMHostlist bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMFile = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetMHostlist = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMFile {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MFile is not set"))
	}
	if !issetMHostlist {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MHostlist is not set"))
	}
	return nil
}

func (p *API_FileInfoV2) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.MFile = &API_BaseFileInfo{}
	if err := p.MFile.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MFile), err)
	}
	return nil
}

func (p *API_FileInfoV2) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*API_Host, 0, size)
	p.MHostlist = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &API_Host{}
		if err := _elem3.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.MHostlist = append(p.MHostlist, _elem3)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *API_FileInfoV2) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MContent = v
	}
	return nil
}

func (p *API_FileInfoV2) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MSeqid = v
	}
	return nil
}

func (p *API_FileInfoV2) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MFlags = v
	}
	return nil
}

func (p *API_FileInfoV2) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.MCaller = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val5 = v
		}
		p.MCaller[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *API_FileInfoV2) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "API_FileInfoV2"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *API_FileInfoV2) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_file", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:m_file: ", p), err)
	}
	if err := p.MFile.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MFile), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:m_file: ", p), err)
	}
	return err
}

func (p *API_FileInfoV2) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_hostlist", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:m_hostlist: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.MHostlist)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MHostlist {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:m_hostlist: ", p), err)
	}
	return err
}

func (p *API_FileInfoV2) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_content", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:m_content: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MContent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_content (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:m_content: ", p), err)
	}
	return err
}

func (p *API_FileInfoV2) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_seqid", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:m_seqid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MSeqid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_seqid (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:m_seqid: ", p), err)
	}
	return err
}

func (p *API_FileInfoV2) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "m_flags", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:m_flags: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.MFlags)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.m_flags (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:m_flags: ", p), err)
	}
	return err
}

func (p *API_FileInfoV2) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMCaller() {
		if err := oprot.WriteFieldBegin(ctx, "m_caller", thrift.MAP, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:m_caller: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MCaller)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MCaller {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:m_caller: ", p), err)
		}
	}
	return err
}

func (p *API_FileInfoV2) Equals(other *API_FileInfoV2) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.MFile.Equals(other.MFile) {
		return false
	}
	if len(p.MHostlist) != len(other.MHostlist) {
		return false
	}
	for i, _tgt := range p.MHostlist {
		_src6 := other.MHostlist[i]
		if !_tgt.Equals(_src6) {
			return false
		}
	}
	if p.MContent != other.MContent {
		return false
	}
	if p.MSeqid != other.MSeqid {
		return false
	}
	if p.MFlags != other.MFlags {
		return false
	}
	if len(p.MCaller) != len(other.MCaller) {
		return false
	}
	for k, _tgt := range p.MCaller {
		_src7 := other.MCaller[k]
		if _tgt != _src7 {
			return false
		}
	}
	return true
}

func (p *API_FileInfoV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("API_FileInfoV2(%+v)", *p)
}

func (p *API_FileInfoV2) Validate() error {
	return nil
}

type DoSomeCmd interface {
	// Parameters:
	//  - FileList
	PushFileV2(ctx context.Context, fileList []*API_FileInfoV2) (_r *API_CommRsp, _err error)
	// Parameters:
	//  - Seqno
	GetPushFileRst(ctx context.Context, seqno string) (_r *API_MapRsp, _err error)
	// Parameters:
	//  - Seqno
	//  - IpList
	GetPushFileRstByIp(ctx context.Context, seqno string, ipList []string) (_r *API_MapRsp, _err error)
	// Parameters:
	//  - Seqno
	//  - CondList
	GetPushFileRstByCond(ctx context.Context, seqno string, condList []string) (_r *API_MapRsp, _err error)
	// Parameters:
	//  - Seqno
	//  - HostList
	GetPushFileRstByIpV2(ctx context.Context, seqno string, hostList []*API_Host) (_r *API_MapRsp, _err error)
}

type DoSomeCmdClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewDoSomeCmdClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DoSomeCmdClient {
	return &DoSomeCmdClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDoSomeCmdClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DoSomeCmdClient {
	return &DoSomeCmdClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDoSomeCmdClient(c thrift.TClient) *DoSomeCmdClient {
	return &DoSomeCmdClient{
		c: c,
	}
}

func (p *DoSomeCmdClient) Client_() thrift.TClient {
	return p.c
}

func (p *DoSomeCmdClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *DoSomeCmdClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//   - FileList
func (p *DoSomeCmdClient) PushFileV2(ctx context.Context, fileList []*API_FileInfoV2) (_r *API_CommRsp, _err error) {
	var _args8 DoSomeCmdPushFileV2Args
	_args8.FileList = fileList
	var _result10 DoSomeCmdPushFileV2Result
	var _meta9 thrift.ResponseMeta
	_meta9, _err = p.Client_().Call(ctx, "pushFileV2", &_args8, &_result10)
	p.SetLastResponseMeta_(_meta9)
	if _err != nil {
		return
	}
	if _ret11 := _result10.GetSuccess(); _ret11 != nil {
		return _ret11, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "pushFileV2 failed: unknown result")
}

// Parameters:
//   - Seqno
func (p *DoSomeCmdClient) GetPushFileRst(ctx context.Context, seqno string) (_r *API_MapRsp, _err error) {
	var _args12 DoSomeCmdGetPushFileRstArgs
	_args12.Seqno = seqno
	var _result14 DoSomeCmdGetPushFileRstResult
	var _meta13 thrift.ResponseMeta
	_meta13, _err = p.Client_().Call(ctx, "getPushFileRst", &_args12, &_result14)
	p.SetLastResponseMeta_(_meta13)
	if _err != nil {
		return
	}
	if _ret15 := _result14.GetSuccess(); _ret15 != nil {
		return _ret15, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getPushFileRst failed: unknown result")
}

// Parameters:
//   - Seqno
//   - IpList
func (p *DoSomeCmdClient) GetPushFileRstByIp(ctx context.Context, seqno string, ipList []string) (_r *API_MapRsp, _err error) {
	var _args16 DoSomeCmdGetPushFileRstByIpArgs
	_args16.Seqno = seqno
	_args16.IpList = ipList
	var _result18 DoSomeCmdGetPushFileRstByIpResult
	var _meta17 thrift.ResponseMeta
	_meta17, _err = p.Client_().Call(ctx, "getPushFileRstByIp", &_args16, &_result18)
	p.SetLastResponseMeta_(_meta17)
	if _err != nil {
		return
	}
	if _ret19 := _result18.GetSuccess(); _ret19 != nil {
		return _ret19, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getPushFileRstByIp failed: unknown result")
}

// Parameters:
//   - Seqno
//   - CondList
func (p *DoSomeCmdClient) GetPushFileRstByCond(ctx context.Context, seqno string, condList []string) (_r *API_MapRsp, _err error) {
	var _args20 DoSomeCmdGetPushFileRstByCondArgs
	_args20.Seqno = seqno
	_args20.CondList = condList
	var _result22 DoSomeCmdGetPushFileRstByCondResult
	var _meta21 thrift.ResponseMeta
	_meta21, _err = p.Client_().Call(ctx, "getPushFileRstByCond", &_args20, &_result22)
	p.SetLastResponseMeta_(_meta21)
	if _err != nil {
		return
	}
	if _ret23 := _result22.GetSuccess(); _ret23 != nil {
		return _ret23, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getPushFileRstByCond failed: unknown result")
}

// Parameters:
//   - Seqno
//   - HostList
func (p *DoSomeCmdClient) GetPushFileRstByIpV2(ctx context.Context, seqno string, hostList []*API_Host) (_r *API_MapRsp, _err error) {
	var _args24 DoSomeCmdGetPushFileRstByIpV2Args
	_args24.Seqno = seqno
	_args24.HostList = hostList
	var _result26 DoSomeCmdGetPushFileRstByIpV2Result
	var _meta25 thrift.ResponseMeta
	_meta25, _err = p.Client_().Call(ctx, "getPushFileRstByIpV2", &_args24, &_result26)
	p.SetLastResponseMeta_(_meta25)
	if _err != nil {
		return
	}
	if _ret27 := _result26.GetSuccess(); _ret27 != nil {
		return _ret27, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getPushFileRstByIpV2 failed: unknown result")
}

type DoSomeCmdProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DoSomeCmd
}

func (p *DoSomeCmdProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DoSomeCmdProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DoSomeCmdProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDoSomeCmdProcessor(handler DoSomeCmd) *DoSomeCmdProcessor {

	self28 := &DoSomeCmdProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self28.processorMap["pushFileV2"] = &doSomeCmdProcessorPushFileV2{handler: handler}
	self28.processorMap["getPushFileRst"] = &doSomeCmdProcessorGetPushFileRst{handler: handler}
	self28.processorMap["getPushFileRstByIp"] = &doSomeCmdProcessorGetPushFileRstByIp{handler: handler}
	self28.processorMap["getPushFileRstByCond"] = &doSomeCmdProcessorGetPushFileRstByCond{handler: handler}
	self28.processorMap["getPushFileRstByIpV2"] = &doSomeCmdProcessorGetPushFileRstByIpV2{handler: handler}
	return self28
}

func (p *DoSomeCmdProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x29 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x29.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x29

}

type doSomeCmdProcessorPushFileV2 struct {
	handler DoSomeCmd
}

func (p *doSomeCmdProcessorPushFileV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err30 error
	args := DoSomeCmdPushFileV2Args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "pushFileV2", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DoSomeCmdPushFileV2Result{}
	if retval, err2 := p.handler.PushFileV2(ctx, args.FileList); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc31 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pushFileV2: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "pushFileV2", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err30 = thrift.WrapTException(err2)
		}
		if err2 := _exc31.Write(ctx, oprot); _write_err30 == nil && err2 != nil {
			_write_err30 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err30 == nil && err2 != nil {
			_write_err30 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err30 == nil && err2 != nil {
			_write_err30 = thrift.WrapTException(err2)
		}
		if _write_err30 != nil {
			return false, thrift.WrapTException(_write_err30)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "pushFileV2", thrift.REPLY, seqId); err2 != nil {
		_write_err30 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err30 == nil && err2 != nil {
		_write_err30 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err30 == nil && err2 != nil {
		_write_err30 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err30 == nil && err2 != nil {
		_write_err30 = thrift.WrapTException(err2)
	}
	if _write_err30 != nil {
		return false, thrift.WrapTException(_write_err30)
	}
	return true, err
}

type doSomeCmdProcessorGetPushFileRst struct {
	handler DoSomeCmd
}

func (p *doSomeCmdProcessorGetPushFileRst) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err32 error
	args := DoSomeCmdGetPushFileRstArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getPushFileRst", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DoSomeCmdGetPushFileRstResult{}
	if retval, err2 := p.handler.GetPushFileRst(ctx, args.Seqno); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc33 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPushFileRst: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getPushFileRst", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err32 = thrift.WrapTException(err2)
		}
		if err2 := _exc33.Write(ctx, oprot); _write_err32 == nil && err2 != nil {
			_write_err32 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err32 == nil && err2 != nil {
			_write_err32 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err32 == nil && err2 != nil {
			_write_err32 = thrift.WrapTException(err2)
		}
		if _write_err32 != nil {
			return false, thrift.WrapTException(_write_err32)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getPushFileRst", thrift.REPLY, seqId); err2 != nil {
		_write_err32 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err32 == nil && err2 != nil {
		_write_err32 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err32 == nil && err2 != nil {
		_write_err32 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err32 == nil && err2 != nil {
		_write_err32 = thrift.WrapTException(err2)
	}
	if _write_err32 != nil {
		return false, thrift.WrapTException(_write_err32)
	}
	return true, err
}

type doSomeCmdProcessorGetPushFileRstByIp struct {
	handler DoSomeCmd
}

func (p *doSomeCmdProcessorGetPushFileRstByIp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err34 error
	args := DoSomeCmdGetPushFileRstByIpArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getPushFileRstByIp", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DoSomeCmdGetPushFileRstByIpResult{}
	if retval, err2 := p.handler.GetPushFileRstByIp(ctx, args.Seqno, args.IpList); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc35 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPushFileRstByIp: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getPushFileRstByIp", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err34 = thrift.WrapTException(err2)
		}
		if err2 := _exc35.Write(ctx, oprot); _write_err34 == nil && err2 != nil {
			_write_err34 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err34 == nil && err2 != nil {
			_write_err34 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err34 == nil && err2 != nil {
			_write_err34 = thrift.WrapTException(err2)
		}
		if _write_err34 != nil {
			return false, thrift.WrapTException(_write_err34)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getPushFileRstByIp", thrift.REPLY, seqId); err2 != nil {
		_write_err34 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err34 == nil && err2 != nil {
		_write_err34 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err34 == nil && err2 != nil {
		_write_err34 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err34 == nil && err2 != nil {
		_write_err34 = thrift.WrapTException(err2)
	}
	if _write_err34 != nil {
		return false, thrift.WrapTException(_write_err34)
	}
	return true, err
}

type doSomeCmdProcessorGetPushFileRstByCond struct {
	handler DoSomeCmd
}

func (p *doSomeCmdProcessorGetPushFileRstByCond) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err36 error
	args := DoSomeCmdGetPushFileRstByCondArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getPushFileRstByCond", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DoSomeCmdGetPushFileRstByCondResult{}
	if retval, err2 := p.handler.GetPushFileRstByCond(ctx, args.Seqno, args.CondList); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc37 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPushFileRstByCond: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getPushFileRstByCond", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err36 = thrift.WrapTException(err2)
		}
		if err2 := _exc37.Write(ctx, oprot); _write_err36 == nil && err2 != nil {
			_write_err36 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err36 == nil && err2 != nil {
			_write_err36 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err36 == nil && err2 != nil {
			_write_err36 = thrift.WrapTException(err2)
		}
		if _write_err36 != nil {
			return false, thrift.WrapTException(_write_err36)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getPushFileRstByCond", thrift.REPLY, seqId); err2 != nil {
		_write_err36 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err36 == nil && err2 != nil {
		_write_err36 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err36 == nil && err2 != nil {
		_write_err36 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err36 == nil && err2 != nil {
		_write_err36 = thrift.WrapTException(err2)
	}
	if _write_err36 != nil {
		return false, thrift.WrapTException(_write_err36)
	}
	return true, err
}

type doSomeCmdProcessorGetPushFileRstByIpV2 struct {
	handler DoSomeCmd
}

func (p *doSomeCmdProcessorGetPushFileRstByIpV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err38 error
	args := DoSomeCmdGetPushFileRstByIpV2Args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getPushFileRstByIpV2", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DoSomeCmdGetPushFileRstByIpV2Result{}
	if retval, err2 := p.handler.GetPushFileRstByIpV2(ctx, args.Seqno, args.HostList); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc39 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPushFileRstByIpV2: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getPushFileRstByIpV2", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err38 = thrift.WrapTException(err2)
		}
		if err2 := _exc39.Write(ctx, oprot); _write_err38 == nil && err2 != nil {
			_write_err38 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err38 == nil && err2 != nil {
			_write_err38 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err38 == nil && err2 != nil {
			_write_err38 = thrift.WrapTException(err2)
		}
		if _write_err38 != nil {
			return false, thrift.WrapTException(_write_err38)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getPushFileRstByIpV2", thrift.REPLY, seqId); err2 != nil {
		_write_err38 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err38 == nil && err2 != nil {
		_write_err38 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err38 == nil && err2 != nil {
		_write_err38 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err38 == nil && err2 != nil {
		_write_err38 = thrift.WrapTException(err2)
	}
	if _write_err38 != nil {
		return false, thrift.WrapTException(_write_err38)
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - FileList
type DoSomeCmdPushFileV2Args struct {
	FileList []*API_FileInfoV2 `thrift:"fileList,1" db:"fileList" json:"fileList"`
}

func NewDoSomeCmdPushFileV2Args() *DoSomeCmdPushFileV2Args {
	return &DoSomeCmdPushFileV2Args{}
}

func (p *DoSomeCmdPushFileV2Args) GetFileList() []*API_FileInfoV2 {
	return p.FileList
}
func (p *DoSomeCmdPushFileV2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DoSomeCmdPushFileV2Args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*API_FileInfoV2, 0, size)
	p.FileList = tSlice
	for i := 0; i < size; i++ {
		_elem40 := &API_FileInfoV2{}
		if err := _elem40.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
		}
		p.FileList = append(p.FileList, _elem40)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DoSomeCmdPushFileV2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "pushFileV2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DoSomeCmdPushFileV2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fileList", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileList: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.FileList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.FileList {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileList: ", p), err)
	}
	return err
}

func (p *DoSomeCmdPushFileV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoSomeCmdPushFileV2Args(%+v)", *p)
}

// Attributes:
//   - Success
type DoSomeCmdPushFileV2Result struct {
	Success *API_CommRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDoSomeCmdPushFileV2Result() *DoSomeCmdPushFileV2Result {
	return &DoSomeCmdPushFileV2Result{}
}

var DoSomeCmdPushFileV2Result_Success_DEFAULT *API_CommRsp

func (p *DoSomeCmdPushFileV2Result) GetSuccess() *API_CommRsp {
	if !p.IsSetSuccess() {
		return DoSomeCmdPushFileV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *DoSomeCmdPushFileV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoSomeCmdPushFileV2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DoSomeCmdPushFileV2Result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &API_CommRsp{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DoSomeCmdPushFileV2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "pushFileV2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DoSomeCmdPushFileV2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DoSomeCmdPushFileV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoSomeCmdPushFileV2Result(%+v)", *p)
}

// Attributes:
//   - Seqno
type DoSomeCmdGetPushFileRstArgs struct {
	Seqno string `thrift:"seqno,1" db:"seqno" json:"seqno"`
}

func NewDoSomeCmdGetPushFileRstArgs() *DoSomeCmdGetPushFileRstArgs {
	return &DoSomeCmdGetPushFileRstArgs{}
}

func (p *DoSomeCmdGetPushFileRstArgs) GetSeqno() string {
	return p.Seqno
}
func (p *DoSomeCmdGetPushFileRstArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seqno = v
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPushFileRst_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "seqno", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seqno: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Seqno)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seqno (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seqno: ", p), err)
	}
	return err
}

func (p *DoSomeCmdGetPushFileRstArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoSomeCmdGetPushFileRstArgs(%+v)", *p)
}

// Attributes:
//   - Success
type DoSomeCmdGetPushFileRstResult struct {
	Success *API_MapRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDoSomeCmdGetPushFileRstResult() *DoSomeCmdGetPushFileRstResult {
	return &DoSomeCmdGetPushFileRstResult{}
}

var DoSomeCmdGetPushFileRstResult_Success_DEFAULT *API_MapRsp

func (p *DoSomeCmdGetPushFileRstResult) GetSuccess() *API_MapRsp {
	if !p.IsSetSuccess() {
		return DoSomeCmdGetPushFileRstResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DoSomeCmdGetPushFileRstResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoSomeCmdGetPushFileRstResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &API_MapRsp{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPushFileRst_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DoSomeCmdGetPushFileRstResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoSomeCmdGetPushFileRstResult(%+v)", *p)
}

// Attributes:
//   - Seqno
//   - IpList
type DoSomeCmdGetPushFileRstByIpArgs struct {
	Seqno  string   `thrift:"seqno,1" db:"seqno" json:"seqno"`
	IpList []string `thrift:"ipList,2" db:"ipList" json:"ipList"`
}

func NewDoSomeCmdGetPushFileRstByIpArgs() *DoSomeCmdGetPushFileRstByIpArgs {
	return &DoSomeCmdGetPushFileRstByIpArgs{}
}

func (p *DoSomeCmdGetPushFileRstByIpArgs) GetSeqno() string {
	return p.Seqno
}

func (p *DoSomeCmdGetPushFileRstByIpArgs) GetIpList() []string {
	return p.IpList
}
func (p *DoSomeCmdGetPushFileRstByIpArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seqno = v
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.IpList = tSlice
	for i := 0; i < size; i++ {
		var _elem41 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem41 = v
		}
		p.IpList = append(p.IpList, _elem41)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPushFileRstByIp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "seqno", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seqno: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Seqno)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seqno (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seqno: ", p), err)
	}
	return err
}

func (p *DoSomeCmdGetPushFileRstByIpArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ipList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ipList: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.IpList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.IpList {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ipList: ", p), err)
	}
	return err
}

func (p *DoSomeCmdGetPushFileRstByIpArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoSomeCmdGetPushFileRstByIpArgs(%+v)", *p)
}

// Attributes:
//   - Success
type DoSomeCmdGetPushFileRstByIpResult struct {
	Success *API_MapRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDoSomeCmdGetPushFileRstByIpResult() *DoSomeCmdGetPushFileRstByIpResult {
	return &DoSomeCmdGetPushFileRstByIpResult{}
}

var DoSomeCmdGetPushFileRstByIpResult_Success_DEFAULT *API_MapRsp

func (p *DoSomeCmdGetPushFileRstByIpResult) GetSuccess() *API_MapRsp {
	if !p.IsSetSuccess() {
		return DoSomeCmdGetPushFileRstByIpResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DoSomeCmdGetPushFileRstByIpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoSomeCmdGetPushFileRstByIpResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &API_MapRsp{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPushFileRstByIp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DoSomeCmdGetPushFileRstByIpResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoSomeCmdGetPushFileRstByIpResult(%+v)", *p)
}

// Attributes:
//   - Seqno
//   - CondList
type DoSomeCmdGetPushFileRstByCondArgs struct {
	Seqno    string   `thrift:"seqno,1" db:"seqno" json:"seqno"`
	CondList []string `thrift:"condList,2" db:"condList" json:"condList"`
}

func NewDoSomeCmdGetPushFileRstByCondArgs() *DoSomeCmdGetPushFileRstByCondArgs {
	return &DoSomeCmdGetPushFileRstByCondArgs{}
}

func (p *DoSomeCmdGetPushFileRstByCondArgs) GetSeqno() string {
	return p.Seqno
}

func (p *DoSomeCmdGetPushFileRstByCondArgs) GetCondList() []string {
	return p.CondList
}
func (p *DoSomeCmdGetPushFileRstByCondArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByCondArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seqno = v
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByCondArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.CondList = tSlice
	for i := 0; i < size; i++ {
		var _elem42 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem42 = v
		}
		p.CondList = append(p.CondList, _elem42)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByCondArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPushFileRstByCond_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByCondArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "seqno", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seqno: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Seqno)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seqno (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seqno: ", p), err)
	}
	return err
}

func (p *DoSomeCmdGetPushFileRstByCondArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "condList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:condList: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.CondList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.CondList {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:condList: ", p), err)
	}
	return err
}

func (p *DoSomeCmdGetPushFileRstByCondArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoSomeCmdGetPushFileRstByCondArgs(%+v)", *p)
}

// Attributes:
//   - Success
type DoSomeCmdGetPushFileRstByCondResult struct {
	Success *API_MapRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDoSomeCmdGetPushFileRstByCondResult() *DoSomeCmdGetPushFileRstByCondResult {
	return &DoSomeCmdGetPushFileRstByCondResult{}
}

var DoSomeCmdGetPushFileRstByCondResult_Success_DEFAULT *API_MapRsp

func (p *DoSomeCmdGetPushFileRstByCondResult) GetSuccess() *API_MapRsp {
	if !p.IsSetSuccess() {
		return DoSomeCmdGetPushFileRstByCondResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DoSomeCmdGetPushFileRstByCondResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoSomeCmdGetPushFileRstByCondResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByCondResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &API_MapRsp{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByCondResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPushFileRstByCond_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByCondResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DoSomeCmdGetPushFileRstByCondResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoSomeCmdGetPushFileRstByCondResult(%+v)", *p)
}

// Attributes:
//   - Seqno
//   - HostList
type DoSomeCmdGetPushFileRstByIpV2Args struct {
	Seqno    string      `thrift:"seqno,1" db:"seqno" json:"seqno"`
	HostList []*API_Host `thrift:"hostList,2" db:"hostList" json:"hostList"`
}

func NewDoSomeCmdGetPushFileRstByIpV2Args() *DoSomeCmdGetPushFileRstByIpV2Args {
	return &DoSomeCmdGetPushFileRstByIpV2Args{}
}

func (p *DoSomeCmdGetPushFileRstByIpV2Args) GetSeqno() string {
	return p.Seqno
}

func (p *DoSomeCmdGetPushFileRstByIpV2Args) GetHostList() []*API_Host {
	return p.HostList
}
func (p *DoSomeCmdGetPushFileRstByIpV2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpV2Args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Seqno = v
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpV2Args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*API_Host, 0, size)
	p.HostList = tSlice
	for i := 0; i < size; i++ {
		_elem43 := &API_Host{}
		if err := _elem43.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
		}
		p.HostList = append(p.HostList, _elem43)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpV2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPushFileRstByIpV2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpV2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "seqno", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seqno: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Seqno)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.seqno (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seqno: ", p), err)
	}
	return err
}

func (p *DoSomeCmdGetPushFileRstByIpV2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hostList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostList: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.HostList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.HostList {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostList: ", p), err)
	}
	return err
}

func (p *DoSomeCmdGetPushFileRstByIpV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoSomeCmdGetPushFileRstByIpV2Args(%+v)", *p)
}

// Attributes:
//   - Success
type DoSomeCmdGetPushFileRstByIpV2Result struct {
	Success *API_MapRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDoSomeCmdGetPushFileRstByIpV2Result() *DoSomeCmdGetPushFileRstByIpV2Result {
	return &DoSomeCmdGetPushFileRstByIpV2Result{}
}

var DoSomeCmdGetPushFileRstByIpV2Result_Success_DEFAULT *API_MapRsp

func (p *DoSomeCmdGetPushFileRstByIpV2Result) GetSuccess() *API_MapRsp {
	if !p.IsSetSuccess() {
		return DoSomeCmdGetPushFileRstByIpV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *DoSomeCmdGetPushFileRstByIpV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoSomeCmdGetPushFileRstByIpV2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpV2Result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &API_MapRsp{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpV2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPushFileRstByIpV2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DoSomeCmdGetPushFileRstByIpV2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DoSomeCmdGetPushFileRstByIpV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DoSomeCmdGetPushFileRstByIpV2Result(%+v)", *p)
}
